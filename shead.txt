import cardclasses
from cardclasses import Deck, Stack, Hand
from cardclasses import values, suits, ranks

import defs
from defs import deal_sh_hand, rules

#main loop
playerTurn = False
while True:

    # welcome to the game
    print("Welcome to Stackhead!")

    # offer rules, start the game
    '''
    rulesyn = str(input("Would you like to know the rules first? y or n"))

    if rulesyn == 'y' or rulesyn == 'Y':
        rules()

    else:
        pass
    '''

    gamedeck = Deck()
    gamedeck.shuffle()
    gamestack = Stack()

    # deal out cards to player and opponent
    phand = Hand()
    ohand = Hand()
    deal_sh_hand(phand, gamedeck)
    deal_sh_hand(ohand, gamedeck)

    # show players cards
    print(phand)

    # show opponents face up cards
    print("Your opponents face up cards are: ")
    for a in range(0, len(ohand.faceups)):
        print("   ", str(ohand.faceups[a]))

    # show the stack
    gamestack.starter_card(gamedeck, gamedeck.deal())
    sval = values[gamestack.all_cards[0].rank]


    def canplay(hand):
        if hand.canplay() < sval:
            return False

        elif hand.canplay() >= sval:
            return True


    def showstack(hand):
        print("The Stack!")
        for a in range(0, len(gamestack.all_cards)):
            print("    ", gamestack.all_cards[a])

        if len(gamestack.all_cards) > 0:
            sval = values[gamestack.all_cards[0].rank]
            print(f"Stack Value: {sval}!")
            print(f"Hand value: {hand.canplay()}!")


    # print("HELLO ", sval)
    print("Starting stack card:", gamestack)

    playing = True

    # main loop
    while playing:

        if len(gamedeck.all_cards) == 0:
            gde = True
        else:
            gde = False

        print("does continue go here?")
        if len(gamestack.all_cards) > 0:
            sval = values[gamestack.all_cards[0].rank]

        if playerTurn:

            # if gamedeck.all_cards:
            # sval = values[gamestack.all_cards[0].rank]

            # else:
            # pass

            print("Your turn!")

            # call return 3 to return 3's value to 3
            phand.return3()

            if not canplay(phand):
                print(" UH OH! sval is more than hval")
                print(sval)
                print(phand.canplay())

            # if there's cards in the stack
            if len(gamestack.all_cards) > 0:
                # and less than 3 cards in hand, deal a card
                if len(phand.cards) < 3 and len(gamedeck.all_cards) > 0:
                    print(f"dealing you the {gamedeck.all_cards[-1]}, {len(gamedeck.all_cards) - 1} cards remaining")
                    phand.add_card(gamedeck.deal())

            # if a turn begins, and no beginning card, deal one from the deck, if not then player starts game
            if len(gamestack.all_cards) == 0:

                if len(gamedeck.all_cards) > 0:
                    gamestack.starter_card(gamedeck, gamedeck.deal())
                    print("Starting stack card:", gamestack)
                    continue

                elif len(gamedeck.all_cards) == 0:
                    print("Deck empty! Play a card")
                    gamestack.all_cards.insert(0, phand.select_card())
                    if gamestack.ten():
                        print("BURN")
                        # empty the stack
                        while len(gamestack.all_cards) > 0:
                            gamestack.all_cards.pop()
                        continue
                    elif not gamestack.ten():
                        playerTurn = False
                        continue


                    playerTurn = False
                    continue

            # show the stack
            phand.return3()
            showstack(phand)



            # if the top of the stack is a 7, this section deals with it
            if gamestack.seven():
                print("You must play lower than a 7!")


                # need to check if the player actually has anything lower than a 7
                if phand.canplay7() == 100:  # phand returns positively
                    # print("You can play something under a 7!")
                    pass  # is pass right to use?
                else:
                    print("You have no cards under 7! Pick up")
                    gamestack.bad_hand(phand)
                    phand.return3()
                    continue

                gamestack.all_cards.insert(0, phand.select_card())
                if gamestack.ten():
                    print("BURN")
                    # empty the stack
                    while len(gamestack.all_cards) > 0:
                        gamestack.all_cards.pop()
                    continue
                '''elif not gamestack.ten():
                    playerTurn = False
                    continue'''

                # if a 7 is played on a 7, go back
                if gamestack.multi7():
                    playerTurn = False
                    continue

                # comp7 returns true if something higher is played on a 7
                if gamestack.comp7():
                    print("That is not lower than a 7!")
                    gamestack.send_back(phand)
                    phand.return3()
                    # showstack(phand)
                    continue

                # if it returns false, the card is lower and therefore valid to play
                elif not gamestack.comp7():
                    print("That is lower than a 7!")
                    if len(phand.cards) < 3 and len(gamedeck.all_cards) > 0:  # deal a card if less than 3 in hand
                        print(
                            f"dealing you the {gamedeck.all_cards[-1]}, {len(gamedeck.all_cards) - 1} cards remaining")
                        phand.add_card(gamedeck.deal())

                    # if a 3 is played on a 7
                    if values[gamestack.all_cards[0].rank] == 3 and values[gamestack.all_cards[1].rank] == 7:
                        values[gamestack.all_cards[0].rank] = 7
                        sval = values[gamestack.all_cards[0].rank]
                        # showstack(phand)
                        playerTurn = False
                        continue

                    playerTurn = False
                    continue

                # if a 3 is played on a 7

            # if a ten is played
            if gamestack.ten():
                print("BURN")
                # empty the stack
                while len(gamestack.all_cards) > 0:
                    gamestack.all_cards.pop()
                continue

            # test hand, pick up if not playable and put a new starting card down
            if not canplay(phand):
                print("Cannot play these cards! Pick up")
                gamestack.bad_hand(phand)
                phand.return3()
                if len(gamedeck.all_cards) > 0:
                    gamestack.starter_card(gamedeck, gamedeck.deal())
                elif len(gamedeck.all_cards) == 0:
                    print("Play a card!")
                    gamestack.all_cards.insert(0, phand.select_card())
                    if gamestack.ten():
                        print("BURN")
                        # empty the stack
                        while len(gamestack.all_cards) > 0:
                            gamestack.all_cards.pop()
                        continue
                    '''elif not gamestack.ten():
                        playerTurn = False
                        continue'''
                print("Starting stack card:", gamestack)
                playerTurn = False
                continue

            # if hand is playable
            elif canplay(phand):

                # player plays card
                gamestack.all_cards.insert(0, phand.select_card())
                if gamestack.ten():
                    print("BURN")
                    # empty the stack
                    while len(gamestack.all_cards) > 0:
                        gamestack.all_cards.pop()
                    continue
                '''elif not gamestack.ten():
                    playerTurn = False
                    continue'''

                # compare the card to the one below, returns true if the card is too low
                if gamestack.compare():
                    # if it's a 2 or 3, then it's playable anywhere
                    if gamestack.magics():
                        sval = values[gamestack.all_cards[0].rank]
                        print("The SVAL is now ", values[gamestack.all_cards[0].rank],"----", sval)
                        playerTurn = False
                        continue
                        # used to be pass

                    # if it's not playable, send it back
                    else:
                        print("That card is too low!")
                        gamestack.send_back(phand)
                        phand.return3()
                        print(f"Stack Value: {sval}!")
                        # pass
                        continue

                # as long as there are still cards in the deck, and less than 3 in hand, deal a card
                if len(gamestack.all_cards) > 0:
                    if len(phand.cards) < 3 and len(gamedeck.all_cards) > 0:
                        print(
                            f"dealing you the {gamedeck.all_cards[-1]}, {len(gamedeck.all_cards) - 1} cards remaining")
                        phand.add_card(gamedeck.deal())
                # continue

            # update sval as the stack will have a new card on top
            sval = values[gamestack.all_cards[0].rank]
            # phand.sorthand()
            # canplay(phand)

            playerTurn = False
            continue

        # opponents turn
        elif not playerTurn:

            # if gamedeck.all_cards:
            # sval = values[gamestack.all_cards[0].rank]

            # else:
            # pass

            ohand.return3()
            ohand.sorthand()

            print("Opponents turn!")

            # call return 3 to return 3's value to 3

            # if there's cards in the stack
            if len(gamestack.all_cards) > 0:
                # and less than 3 cards in hand, deal a card
                if len(ohand.cards) < 3 and len(gamedeck.all_cards) > 0:
                    print(
                        f"dealing opponent the {gamedeck.all_cards[-1]}, {len(gamedeck.all_cards) - 1} cards remaining")
                    ohand.add_card(gamedeck.deal())

            # if a turn begins, and no beginning card, deal one from the deck, if not then opponent starts game
            if len(gamestack.all_cards) == 0:

                if len(gamedeck.all_cards) > 0:
                    gamestack.starter_card(gamedeck, gamedeck.deal())
                    print("Starting stack card:", gamestack)
                    continue

                elif len(gamedeck.all_cards) == 0:
                    # print("Deck empty! Play a card")
                    # gamestack.all_cards.insert(0,ohand.select_card())

                    playables = []
                    for a in range(0, len(ohand.cards)):
                        # print(ohand.cards[a])
                        # print(values[ohand.cards[a].rank])

                        # playables.append(values[ohand.cards[a].rank])
                        playables.append(ohand.cards.pop(0))

                        if len(playables) > 0:
                            for a in range(0, len(playables)):
                                if values[playables[a].rank] == 2 or values[playables[a].rank] == 3:
                                    continue
                                if values[playables[a].rank] < sval:
                                    ohand.cards.append(playables.pop(a))

                    print("Opponent can play: ")
                    for a in playables:
                        print("    ", a)
                    # print(min(playables))
                    # print()

                    gamestack.all_cards.insert(0, playables.pop(-1))
                    if gamestack.ten():
                        print("BURN")
                        # empty the stack
                        while len(gamestack.all_cards) > 0:
                            gamestack.all_cards.pop()
                        continue
                    playerturn = True
                    continue

            # show the stack
            ohand.return3()
            showstack(ohand)
            if not canplay(ohand):
                print(" UH OH! ")

            # if the top of the stack is a 7, this section deals with it
            if gamestack.seven():
                print("Opponent must play lower than a 7!")

                # need to check if the player actually has anything lower than a 7
                if ohand.canplay7() == 100:  # phand returns positively
                    # print("You can play something under a 7!")
                    pass  # is pass right to use?
                elif not ohand.canplay7():
                    print("Opponent has no cards under 7! Picking up")
                    gamestack.bad_hand(ohand)
                    ohand.return3()

                    playerTurn = True
                    continue

                # gamestack.all_cards.insert(0,ohand.select_card())
                if int(sval) == 7:

                    playables = []
                    for a in range(0, len(ohand.cards)):
                        # print(ohand.cards[a])
                        # print(values[ohand.cards[a].rank])

                        # playables.append(values[ohand.cards[a].rank])
                        playables.append(ohand.cards.pop(0))

                        if len(playables) > 0:
                            for a in range(0, len(playables)):
                                if values[playables[a].rank] > sval:
                                    ohand.cards.append(playables.pop(a))

                    print("Opponent can play: ")
                    for a in playables:
                        print("    ", a)
                    # print(min(playables))
                    # print()

                    gamestack.all_cards.insert(0, playables.pop(-1))
                    if gamestack.ten():
                        print("BURN")
                        # empty the stack
                        while len(gamestack.all_cards) > 0:
                            gamestack.all_cards.pop()
                        continue

                    if gamestack.compare():
                        if gamestack.magics():
                            print("The SVAL is now ", values[gamestack.all_cards[0].rank],"----", sval)
                    playerTurn = True
                    continue

                # if a 7 is played on a 7, go back
                if gamestack.multi7():
                    playerTurn = True
                    continue


                if len(gamestack.all_cards) > 1:

                    # comp7 returns true if something higher is played on a 7
                    if gamestack.comp7():
                        print("That is not lower than a 7!")
                        gamestack.send_back(ohand)
                        ohand.return3()
                        # showstack(phand)
                        continue

                    # if it returns false, the card is lower and therefore valid to play
                    elif not gamestack.comp7():
                        print("Opponent played lower than a 7")
                        if len(phand.cards) < 3 and len(gamedeck.all_cards) > 0:  # deal a card if less than 3 in hand
                            print(
                                f"dealing opponent the {gamedeck.all_cards[-1]}, {len(gamedeck.all_cards) - 1} cards remaining")
                            ohand.add_card(gamedeck.deal())

                        # if a 3 is played on a 7
                        if values[gamestack.all_cards[0].rank] == 3 and values[gamestack.all_cards[1].rank] == 7:
                            values[gamestack.all_cards[0].rank] = 7
                            sval = values[gamestack.all_cards[0].rank]
                            # showstack(phand)
                            playerTurn = False
                            continue

                        #else:
                            #showstack(ohand)

                        playerTurn = True
                        continue

                # if a ten is played
            if gamestack.ten():
                print("BURN")
                # empty the stack
                while len(gamestack.all_cards) > 0:
                    gamestack.all_cards.pop()
                continue

            # test hand, pick up if not playable and put a new starting card down
            if not canplay(ohand):
                print("Opponent cannot play any cards! Picking up")
                gamestack.bad_hand(ohand)
                ohand.return3()
                if len(gamedeck.all_cards) > 0:
                    gamestack.starter_card(gamedeck, gamedeck.deal())
                elif len(gamedeck.all_cards) == 0:
                    # print("Play a card!")
                    # gamestack.all_cards.insert(0,ohand.select_card())

                    playables = []
                    for a in range(0, len(ohand.cards)):
                        # print(ohand.cards[a])
                        # print(values[ohand.cards[a].rank])

                        # playables.append(values[ohand.cards[a].rank])
                        playables.append(ohand.cards.pop(0))

                        if len(playables) > 0:
                            for a in range(0, len(playables)):
                                if values[playables[a].rank] == 2 or values[playables[a].rank] == 3:
                                    continue
                                if values[playables[a].rank] < sval:
                                    ohand.cards.append(playables.pop(a))

                    '''
                    showing what the opponent can play, used for testing
                    print("Opponent can play: ")
                    for a in playables:
                        print("    ", a)
                    '''
                    # print(min(playables))
                    # print()

                    print("Opponent plays the", playables[-1], "!")

                    gamestack.all_cards.insert(0, playables.pop(-1))
                    if gamestack.ten():
                        print("BURN")
                        # empty the stack
                        while len(gamestack.all_cards) > 0:
                            gamestack.all_cards.pop()
                        continue
                    '''elif not gamestack.ten():
                        playerTurn = True
                        continue
                        '''

                print("Starting stack card:", gamestack)
                # pass
                playerTurn = True
                continue

            # if hand is playable
            elif canplay(ohand):

                '''
                need to to change it so the opponent decides their own card to play

                loop through opponents hand, play lowest playable card?

                if the sval is low, the AI will play the equivalent/lowest card it can

                if the sval is 7, the the AI will play the lowest playable card it can

                if the sval is high, the AI will play the equivalent/lowest card it can

                check sval 
                go through cards, note playable ones (list maybe?)
                    nested list for specials like 2,3 & 10, will make opponent smarter
                '''

                if int(sval) in [2, 3, 4, 5, 6, 8, 9, 11, 12, 13, 14]:

                    playables = []
                    for a in range(0, len(ohand.cards)):
                        # print(ohand.cards[a])
                        # print(values[ohand.cards[a].rank])

                        # playables.append(values[ohand.cards[a].rank])
                        playables.append(ohand.cards.pop(0))

                        if len(playables) > 0:
                            for a in range(0, len(playables)):
                                if values[playables[a].rank] == 2 or values[playables[a].rank] == 3:
                                    continue
                                if values[playables[a].rank] < sval:
                                    ohand.cards.append(playables.pop(a))

                    '''
                    print("Opponent can play: ")
                    for a in playables:
                        print("    ", a)
                    # print(min(playables))
                    # print()
                    '''

                    print("Opponent plays the", playables[-1], "!")
                    gamestack.all_cards.insert(0, playables.pop(-1))

                    if gamestack.ten():
                        print("BURN")
                        # empty the stack
                        while len(gamestack.all_cards) > 0:
                            gamestack.all_cards.pop()
                        continue
                    '''elif not gamestack.ten():
                        playerTurn = True
                        continue'''

                    if gamestack.compare():
                        # if it's a 2 or 3, then it's playable anywhere
                        if gamestack.magics():
                            sval = values[gamestack.all_cards[0].rank]
                            print("The SVAL is now ", values[gamestack.all_cards[0].rank],"----", sval)
                            playerTurn = True
                            continue
                            # used to be pass
                        # if it's not playable, send it back

                if len(gamestack.all_cards) > 1:
                    if gamestack.compare():
                        # if it's a 2 or 3, then it's playable anywhere
                        if gamestack.magics():
                            sval = values[gamestack.all_cards[0].rank]
                            print("The SVAL is now ", values[gamestack.all_cards[0].rank],"----", sval)
                            playerTurn = True
                            continue
                            # used to be pass
                        # if it's not playable, send it back

                # as long as there are still cards in the deck, and less than 3 in hand, deal a card
                if len(gamestack.all_cards) > 0:
                    if len(ohand.cards) < 3 and len(gamedeck.all_cards) > 0:
                        print(
                            f"dealing opponent the {gamedeck.all_cards[-1]}, {len(gamedeck.all_cards) - 1} cards remaining")
                        ohand.add_card(gamedeck.deal())
                # continue

            # update sval as the stack will have a new card on top
            sval = values[gamestack.all_cards[0].rank]
            # phand.sorthand()
            # canplay(phand)

            playerTurn = True
